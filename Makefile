#
# This makefile builds sstv_rx project
# The target platform is SBOS running on GPT DSP
#

# Program name.
PROGRAM=sstv_rx

# Build directory. All intermediate files created while 
# building this project are stored in this directory.
BUILD_DIR=build

# Source files directory
SOURCE_DIR=Sources

PROJ_DIR=.

# Module Libs directory
RF_LIB=$(PROJ_DIR)/RF/rf.a

LIBS_DIR=$(PROJ_DIR)/Lib
COMMON_DIR=$(PROJ_DIR)/Common_Sources
PSD_DIR=$(PROJ_DIR)/PSD
PSD_DIR_SRC=$(PSD_DIR)/Sources

# Source files. The Files of the following types are 
# supported: *.c, *.s, *.SS
SOURCE_FILES= \
	main.c	\
	rx_thread.c \
	sstv_handle_thread.c 
	
SOURCE_FILES_COMMON = \
	$(COMMON_DIR)/function.c	\
	$(COMMON_DIR)/shell.c	\
	$(COMMON_DIR)/threadutil.c
	
SOURCE_FILES_PSD = \
	$(PSD_DIR_SRC)/psd_a2d.c	\
	$(PSD_DIR_SRC)/psd_d2a.c

# Pre-built library files
PREBUILT_LIB_FILES= \
	$(SBROOT)/lib/libsbdsp-sb3500.a \
	$(LIBS_DIR)/libCompFFT512.a \
	$(PHY_RX_LIB) \
	$(RF_LIB)	\

# SandBlaster linker script for static memory allocation 
ATFILES= $(PROJ_DIR)/linker.at

ifeq "$(SBROOT)" ""
$(error "SBROOT environment variable is not defined")
endif

# Make sure SBROOT uses '/' path separator characters
SBROOT:=$(subst \,/,$(SBROOT))

# GPT DSP tools
SBCC="$(SBROOT)/bin/sbcc"
SBAR="$(SBROOT)/bin/sb-ar"
SBNM="$(SBROOT)/bin/sb-nm"
SBOD="$(SBROOT)/bin/sb-objdump"
SBCCFE="$(SBROOT)/lib/sbcc-lib/sbcc-fe"

# Common UNIX command line utilities
ifeq "$(patsubst Windows%,Windows,$(OS))" "Windows" 
	MKDIR="$(SBROOT)/msys/bin/mkdir"
	RM="$(SBROOT)/msys/bin/rm"
	CAT="$(SBROOT)/msys/bin/cat"
else ifeq ($(shell uname),Linux)
	MKDIR=mkdir
	RM=rm
	CAT=cat
endif	

# C compiler flags common to all source files
#CFLAGS=--restrict --inline $(XCFLAGS) --c99 -g
CFLAGS=--march=sb3500 $(XCFLAGS) --no-wrap-diagnostics --c99

# C preprocessor include directories common to all source files
HEAD_DIR_RF = $(PROJ_DIR)/RF/Headers
HEAD_DIR_COMM = $(PROJ_DIR)/Common_Headers
HEAD_DIR_PSD = $(PROJ_DIR)/PSD/Headers

CPPINC= \
		-I$(HEAD_DIR_COMM) \
		-I$(HEAD_DIR_PSD) \
		-I$(HEAD_DIR_RF) \

# C preprocessor definitions common to all source files
CPPDEF=$(XCPPDEF)

# C compiler flags passed to the linker
CLDFLAGS=

# Make object file names out of the source files names
SOURCE_TO_OBJECT=$(addprefix $(BUILD_DIR)/,\
$(patsubst %.c,%.o,\
$(patsubst %.SS,%.o,\
$(patsubst %.s,%.o,\
$1))))

SOURCE_TO_OBJECT_SUB=$(addprefix $2/, \
	$(patsubst %.c,%.o,\
	$(notdir  $(foreach n, $1, $(n)))))

# List of the post-processed linker script file names 
# This list is generated by make from $ATFILES
ATFILES_PP=$(foreach f,$(ATFILES),$(BUILD_DIR)/$(notdir $f))

# Write automatically generated dependencies to this file
AUTO_DEPENDENCIES_FILE=Makefile.dep

.PHONY: run

all: sub $(BUILD_DIR) $(AUTO_DEPENDENCIES_FILE) $(BUILD_DIR)/$(PROGRAM).sbx
	@echo "'$@' complete"

sub: 
	$(MAKE) -C $(PROJ_DIR)/RF
	$(MAKE) -C $(PROJ_DIR)/PSD
	$(MAKE) -C $(PROJ_DIR)/Common_Sources

clean:
	-$(RM) -rf $(addprefix $(BUILD_DIR)/*.,o a s v sbx)
	-$(RM) -rf $(BUILD_DIR) $(AUTO_DEPENDENCIES_FILE)
	@echo "'$@' complete"

clobber: clean
	@echo "'$@' complete"

$(BUILD_DIR):
	$(MKDIR) -p $@
	@echo "'$@' complete"

$(BUILD_DIR)/$(PROGRAM).sbx: $(PREBUILT_LIB_FILES) $(ATFILES_PP) \
		$(call SOURCE_TO_OBJECT,$(SOURCE_FILES)) \
		
	$(SBCC) --march=sb3500 $(CLDFLAGS) -o $@ \
		$(foreach f,$(filter %.at,$^),-Xld "--at-file=$f") \
		$(filter %.o,$^) \
		$(call SOURCE_TO_OBJECT_SUB,$(SOURCE_FILES_COMMON), $(COMMON_DIR))	\
		$(call SOURCE_TO_OBJECT_SUB,$(SOURCE_FILES_PSD), $(PSD_DIR))	\
		$(filter %.a,$^)

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.c
	$(SBCC) -c $(CFLAGS) $(CPPINC) $(CPPDEF) -o $@ $<

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.SS
	$(SBCC) -c $(CFLAGS) $(CPPINC) $(CPPDEF) -o $@ $<

$(BUILD_DIR)/%.at: %.at
	$(SBCCFE) -E -P $(CPPDEF) $< >$@

$(BUILD_DIR)/%.d: $(SOURCE_DIR)/%.c
	$(MKDIR) -p $(BUILD_DIR)
	$(SBCC) $(CFLAGS) $(CPPINC) $(CPPDEF) -MM -MQ $(patsubst %.d,%.o,$@) -MM -MQ $@ $< > $@

$(AUTO_DEPENDENCIES_FILE): $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.d,$(filter %.c,$(SOURCE_FILES))))
	$(CAT) $^ > $@

ifneq ($(firstword $(MAKECMDGOALS)),clean)
ifneq ($(firstword $(MAKECMDGOALS)),clobber)
-include $(AUTO_DEPENDENCIES_FILE)
endif
endif
